<?php

class UserLimitPageTreeAccess extends WireData implements Module {
	public static function getModuleInfo() {
		return array(
			'title' => 'User Limit Page Tree Access',
			'summary' => 'Limit access for User in Page Tree to a certain page and its children',
			'version' => 1,
			'permanent' => false,
			'permission' => 'page-edit',
			'icon' => 'unlock-alt',
			'autoload' => true,
			'author' => 'Marcin.Koziarz.pl',
			);
	}
	
	protected $limitField = 'user_page_limit';
	protected $limitID;
	
	public function setRootPageLimit(HookEvent $event) {
		$getid = (int)$_GET['id'];
		
		$root = $this->pages->get($this->limitID);
		$current = $this->pages->get($getid);
		
		//echo "root: ".$root->title.'[#'.$root->id.']<br>';
		//echo "current: ".$current->title.'[#'.$current->id.']<br>';
		
		
		if( !$current->parents()->has($root) ) {
			$event->object->id=$this->limitID;
		}
	}
	
	public function checkRootPageLimitAccess(HookEvent $event) {
	
	}
	
	public function init() {
		$this->limitID=$this->user->get($this->limitField)->id;
		//echo $this->limitID;
		$this->addHookBefore('ProcessPageList::execute',$this,'setRootPageLimit');
	}
	
	public function ___install() {
		if($this->fields->get($this->limitField)) {
			$this->error("You already have a '".$this->limitField."' field."); 
			return;
		}
		
		$field = new Field();
		$field->type = $this->modules->get("FieldtypePage");
		$field->name = $this->limitField;
		$field->label = 'Root of accessible page tree';
		$field->description = "";
		$field->derefAsPage = 2;
		$field->parent_id = 0;
		$field->labelFieldName = 'name';
		$field->inputfield = 'InputfieldPageListSelect';
		$field->save();
		
		$this->addFieldToTemplate($field,"user");
		//$this->addFieldToTemplate($field,"role");
		
	}
	
	public function ___uninstall() {
		
		$field = $this->fields->get($this->limitField);
		
		if( $field ) {
			$this->removeFieldFromTemplate($field,"user");
			//$this->removeFieldFromTemplate($field,"role");
			$this->fields->delete($field);
		}
	}
	
	private function addFieldToTemplate($field,$tplname) {
		$tpl = $this->templates->get($tplname);
		$tpl->fieldgroup->add($field);
		$tpl->fieldgroup->save();
	}
	
	private function removeFieldFromTemplate($field,$tplname) {
		$tpl = $this->templates->get($tplname);
		$tpl->fieldgroup->remove($field);
		$tpl->fieldgroup->save();
	}
}